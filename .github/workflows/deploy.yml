name: deploy-docusaurus

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Check out repo
        uses: actions/checkout@v3
      # Node is required for npm
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: "16"
      - name: Install dependencies
        run: npm install  
      - name: Check main repo version
        id: check_main_repo_version
        run: |
          echo "::set-output name=remote-version::$(node ./scripts/check-version.js --type remote)"
        env:
          TARGET_REPO: ${{ secrets.TARGET_REPO }}
          GH_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
      - name: Check current docs version
        id: check_current_docs_version
        run: |
          echo "::set-output name=docs-version::$(node ./scripts/check-version.js --type docs)"
      - name: Print versions
        run: |
          echo "Remote version: ${{ env.REMOTE_VERSION }} - Docs version: ${{ env.DOCS_VERSION }}"
        env:
          REMOTE_VERSION: ${{ steps.check_main_repo_version.outputs.remote-version }}
          DOCS_VERSION: ${{ steps.check_current_docs_version.outputs.docs-version }}
      - name: Evaluate versions
        id: evaluate_versions
        run: |
          echo "::set-output name=versions-compare::$(node ./scripts/compare-versions.js --from ${{ env.DOCS_VERSION }} --to ${{ env.REMOTE_VERSION }})"
        env:
          REMOTE_VERSION: ${{ steps.check_main_repo_version.outputs.remote-version }}
          DOCS_VERSION: ${{ steps.check_current_docs_version.outputs.docs-version }}
      - name: Nothing to do
        if: steps.evaluate_versions.outputs.versions-compare == 'false'
        run: echo "No need to update."
      - name: Checkout main repo
        if: steps.evaluate_versions.outputs.versions-compare == 'true'
        uses: actions/checkout@v3
        with:
          repository: ${{ secrets.TARGET_REPO }}
          token: ${{ secrets.GH_API_TOKEN }}
          path: main-repo
      - name: Print directory list
        run: |
          ls -la
      # - name: Copy docs directory
      #   if: steps.evaluate_versions.outputs.versions-compare == 'true'
      #   run: |
      #     rm -rf ./docs
      #     export REPO=$(echo "${{ secrets.TARGET_REPO }}" | sed -e 's/\/.*\///g')
      #     cp -r $REPO/docs .
      #     ls -la ./docs
      - name: Copy docs directory
        if: steps.evaluate_versions.outputs.versions-compare == 'true'
        run: |
          rm -rf ./docs
          cp -r main-repo/docs .
      
      - name: Build Docusaurus website
        if: steps.evaluate_versions.outputs.versions-compare == 'true'
        run: |
          npm install 
          npx docusaurus docs:version $DOCS_VERSION
          npm run build
          git add .
          git commit -m 'Bump docs to version ${DOCS_VERSION}'
          git push origin main
        env:
          DOCS_VERSION: ${{ steps.check_current_docs_version.outputs.docs-version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy to GitHub Pages
        if: steps.evaluate_versions.outputs.versions-compare == 'true'
        uses: crazy-max/ghaction-github-pages@v3
        with:
          target_branch: gh-pages
          build_dir: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      